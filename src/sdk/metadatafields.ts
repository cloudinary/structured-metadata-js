/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metadataFieldsCreateMetadataField } from "../funcs/metadataFieldsCreateMetadataField.js";
import { metadataFieldsDeleteMetadataField } from "../funcs/metadataFieldsDeleteMetadataField.js";
import { metadataFieldsDeleteMetadataFieldDatasource } from "../funcs/metadataFieldsDeleteMetadataFieldDatasource.js";
import { metadataFieldsGetMetadataField } from "../funcs/metadataFieldsGetMetadataField.js";
import { metadataFieldsListMetadataFields } from "../funcs/metadataFieldsListMetadataFields.js";
import { metadataFieldsReorderMetadataField } from "../funcs/metadataFieldsReorderMetadataField.js";
import { metadataFieldsReorderMetadataFields } from "../funcs/metadataFieldsReorderMetadataFields.js";
import { metadataFieldsRestoreMetadataFieldDatasource } from "../funcs/metadataFieldsRestoreMetadataFieldDatasource.js";
import { metadataFieldsSearchDatasourceInMDField } from "../funcs/metadataFieldsSearchDatasourceInMDField.js";
import { metadataFieldsSearchMetadataFieldDatasource } from "../funcs/metadataFieldsSearchMetadataFieldDatasource.js";
import { metadataFieldsUpdateMetadataField } from "../funcs/metadataFieldsUpdateMetadataField.js";
import { metadataFieldsUpdateMetadataFieldDatasource } from "../funcs/metadataFieldsUpdateMetadataFieldDatasource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MetadataFields extends ClientSDK {
  /**
   * Creates a new structured metadata field in your account
   *
   * @remarks
   * Creates a new metadata field with the specified properties and configuration.
   */
  async createMetadataField(
    request: components.MetadataField,
    options?: RequestOptions,
  ): Promise<components.MetadataField> {
    return unwrapAsync(metadataFieldsCreateMetadataField(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists all structured metadata fields defined in your Cloudinary product environment
   *
   * @remarks
   * Retrieves a list of all metadata fields in the product environment based on the provided filters.
   */
  async listMetadataFields(
    externalIds?: Array<string> | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListMetadataFieldsResponse> {
    return unwrapAsync(metadataFieldsListMetadataFields(
      this,
      externalIds,
      options,
    ));
  }

  /**
   * Retrieves the definition of a specific structured metadata field by its identifier (external_id)
   *
   * @remarks
   * Retrieves detailed information about the specified metadata field.
   */
  async getMetadataField(
    externalId: string,
    options?: RequestOptions,
  ): Promise<components.MetadataField> {
    return unwrapAsync(metadataFieldsGetMetadataField(
      this,
      externalId,
      options,
    ));
  }

  /**
   * Updates the configuration of an existing metadata field
   *
   * @remarks
   * Updates the properties and configuration of the specified metadata field.
   */
  async updateMetadataField(
    externalId: string,
    metadataField: components.MetadataField,
    options?: RequestOptions,
  ): Promise<components.MetadataField> {
    return unwrapAsync(metadataFieldsUpdateMetadataField(
      this,
      externalId,
      metadataField,
      options,
    ));
  }

  /**
   * Deletes a structured metadata field definition from your account
   *
   * @remarks
   * Permanently deletes the specified metadata field and all its associated data.
   */
  async deleteMetadataField(
    externalId: string,
    options?: RequestOptions,
  ): Promise<operations.DeleteMetadataFieldResponse> {
    return unwrapAsync(metadataFieldsDeleteMetadataField(
      this,
      externalId,
      options,
    ));
  }

  /**
   * Search across all metadata field datasources
   *
   * @remarks
   * Performs a search across all metadata field datasources to find matching values.
   */
  async searchMetadataFieldDatasource(
    request: operations.SearchMetadataFieldDatasourceRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.SearchMetadataFieldDatasourceResponse>> {
    return unwrapAsync(metadataFieldsSearchMetadataFieldDatasource(
      this,
      request,
      options,
    ));
  }

  /**
   * Reorder all metadata fields
   *
   * @remarks
   * Changes the display order of all metadata fields based on specified criteria.
   */
  async reorderMetadataFields(
    request: operations.ReorderMetadataFieldsRequest,
    options?: RequestOptions,
  ): Promise<operations.ReorderMetadataFieldsResponse> {
    return unwrapAsync(metadataFieldsReorderMetadataFields(
      this,
      request,
      options,
    ));
  }

  /**
   * Change position of metadata field
   *
   * @remarks
   * Changes the display position of a specific metadata field within the list.
   */
  async reorderMetadataField(
    externalId: string,
    requestBody: operations.ReorderMetadataFieldRequestBody,
    options?: RequestOptions,
  ): Promise<operations.ReorderMetadataFieldResponse> {
    return unwrapAsync(metadataFieldsReorderMetadataField(
      this,
      externalId,
      requestBody,
      options,
    ));
  }

  /**
   * Updates the allowed values (the datasource) for a specified metadata field
   *
   * @remarks
   * Updates the values in a metadata field's datasource, including adding, modifying, or changing the order of values.
   */
  async updateMetadataFieldDatasource(
    externalId: string,
    requestBody: operations.UpdateMetadataFieldDatasourceRequestBody,
    options?: RequestOptions,
  ): Promise<operations.UpdateMetadataFieldDatasourceResponse> {
    return unwrapAsync(metadataFieldsUpdateMetadataFieldDatasource(
      this,
      externalId,
      requestBody,
      options,
    ));
  }

  /**
   * Removes one or more allowed values from a metadata field's datasource
   *
   * @remarks
   * Removes specific values from a metadata field's datasource by their external IDs.
   */
  async deleteMetadataFieldDatasource(
    externalId: string,
    requestBody: operations.DeleteMetadataFieldDatasourceRequestBody,
    options?: RequestOptions,
  ): Promise<components.MetadataFieldDatasourceValuesArray> {
    return unwrapAsync(metadataFieldsDeleteMetadataFieldDatasource(
      this,
      externalId,
      requestBody,
      options,
    ));
  }

  /**
   * Search datasource values in a metadata field
   *
   * @remarks
   * Performs a search within a specific metadata field's datasource to find matching values, with support for exact or partial matches.
   */
  async searchDatasourceInMDField(
    externalId: string,
    requestBody: operations.SearchDatasourceInMDFieldRequestBody,
    maxResults?: number | undefined,
    term?: string | undefined,
    exactMatch?: boolean | undefined,
    options?: RequestOptions,
  ): Promise<components.MetadataFieldDatasourceValuesArray> {
    return unwrapAsync(metadataFieldsSearchDatasourceInMDField(
      this,
      externalId,
      requestBody,
      maxResults,
      term,
      exactMatch,
      options,
    ));
  }

  /**
   * Restore datasource values
   *
   * @remarks
   * Restores datasource values that have been deleted.
   */
  async restoreMetadataFieldDatasource(
    externalId: string,
    requestBody: operations.RestoreMetadataFieldDatasourceRequestBody,
    options?: RequestOptions,
  ): Promise<components.MetadataFieldDatasourceValuesArray> {
    return unwrapAsync(metadataFieldsRestoreMetadataFieldDatasource(
      this,
      externalId,
      requestBody,
      options,
    ));
  }
}
