/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
 */
export type MetadataRuleResponseCondition = {};

/**
 * The result to apply when the condition is met, should adhere to the metadata rule result schema.
 */
export type MetadataRuleResponseResult = {};

/**
 * The state of the rule.
 */
export const MetadataRuleResponseState = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The state of the rule.
 */
export type MetadataRuleResponseState = ClosedEnum<
  typeof MetadataRuleResponseState
>;

export type MetadataRuleResponse = {
  /**
   * The ID of the metadata field this rule applies to.
   */
  metadataFieldId?: string | undefined;
  /**
   * A descriptive name for the metadata rule.
   */
  name?: string | undefined;
  /**
   * The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
   */
  condition?: MetadataRuleResponseCondition | undefined;
  /**
   * The result to apply when the condition is met, should adhere to the metadata rule result schema.
   */
  result?: MetadataRuleResponseResult | undefined;
  /**
   * The state of the rule.
   */
  state?: MetadataRuleResponseState | undefined;
  /**
   * The position/order of this rule relative to other rules.
   */
  position?: number | undefined;
  /**
   * The unique identifier of the metadata rule.
   */
  externalId?: string | undefined;
  /**
   * A signature representing the condition structure.
   */
  conditionSignature?: string | undefined;
};

/** @internal */
export const MetadataRuleResponseCondition$inboundSchema: z.ZodType<
  MetadataRuleResponseCondition,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRuleResponseCondition$Outbound = {};

/** @internal */
export const MetadataRuleResponseCondition$outboundSchema: z.ZodType<
  MetadataRuleResponseCondition$Outbound,
  z.ZodTypeDef,
  MetadataRuleResponseCondition
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleResponseCondition$ {
  /** @deprecated use `MetadataRuleResponseCondition$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleResponseCondition$inboundSchema;
  /** @deprecated use `MetadataRuleResponseCondition$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleResponseCondition$outboundSchema;
  /** @deprecated use `MetadataRuleResponseCondition$Outbound` instead. */
  export type Outbound = MetadataRuleResponseCondition$Outbound;
}

export function metadataRuleResponseConditionToJSON(
  metadataRuleResponseCondition: MetadataRuleResponseCondition,
): string {
  return JSON.stringify(
    MetadataRuleResponseCondition$outboundSchema.parse(
      metadataRuleResponseCondition,
    ),
  );
}

export function metadataRuleResponseConditionFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleResponseCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleResponseCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleResponseCondition' from JSON`,
  );
}

/** @internal */
export const MetadataRuleResponseResult$inboundSchema: z.ZodType<
  MetadataRuleResponseResult,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRuleResponseResult$Outbound = {};

/** @internal */
export const MetadataRuleResponseResult$outboundSchema: z.ZodType<
  MetadataRuleResponseResult$Outbound,
  z.ZodTypeDef,
  MetadataRuleResponseResult
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleResponseResult$ {
  /** @deprecated use `MetadataRuleResponseResult$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleResponseResult$inboundSchema;
  /** @deprecated use `MetadataRuleResponseResult$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleResponseResult$outboundSchema;
  /** @deprecated use `MetadataRuleResponseResult$Outbound` instead. */
  export type Outbound = MetadataRuleResponseResult$Outbound;
}

export function metadataRuleResponseResultToJSON(
  metadataRuleResponseResult: MetadataRuleResponseResult,
): string {
  return JSON.stringify(
    MetadataRuleResponseResult$outboundSchema.parse(metadataRuleResponseResult),
  );
}

export function metadataRuleResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleResponseResult' from JSON`,
  );
}

/** @internal */
export const MetadataRuleResponseState$inboundSchema: z.ZodNativeEnum<
  typeof MetadataRuleResponseState
> = z.nativeEnum(MetadataRuleResponseState);

/** @internal */
export const MetadataRuleResponseState$outboundSchema: z.ZodNativeEnum<
  typeof MetadataRuleResponseState
> = MetadataRuleResponseState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleResponseState$ {
  /** @deprecated use `MetadataRuleResponseState$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleResponseState$inboundSchema;
  /** @deprecated use `MetadataRuleResponseState$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleResponseState$outboundSchema;
}

/** @internal */
export const MetadataRuleResponse$inboundSchema: z.ZodType<
  MetadataRuleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata_field_id: z.string().optional(),
  name: z.string().optional(),
  condition: z.lazy(() => MetadataRuleResponseCondition$inboundSchema)
    .optional(),
  result: z.lazy(() => MetadataRuleResponseResult$inboundSchema).optional(),
  state: MetadataRuleResponseState$inboundSchema.optional(),
  position: z.number().int().optional(),
  external_id: z.string().optional(),
  condition_signature: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "metadata_field_id": "metadataFieldId",
    "external_id": "externalId",
    "condition_signature": "conditionSignature",
  });
});

/** @internal */
export type MetadataRuleResponse$Outbound = {
  metadata_field_id?: string | undefined;
  name?: string | undefined;
  condition?: MetadataRuleResponseCondition$Outbound | undefined;
  result?: MetadataRuleResponseResult$Outbound | undefined;
  state?: string | undefined;
  position?: number | undefined;
  external_id?: string | undefined;
  condition_signature?: string | undefined;
};

/** @internal */
export const MetadataRuleResponse$outboundSchema: z.ZodType<
  MetadataRuleResponse$Outbound,
  z.ZodTypeDef,
  MetadataRuleResponse
> = z.object({
  metadataFieldId: z.string().optional(),
  name: z.string().optional(),
  condition: z.lazy(() => MetadataRuleResponseCondition$outboundSchema)
    .optional(),
  result: z.lazy(() => MetadataRuleResponseResult$outboundSchema).optional(),
  state: MetadataRuleResponseState$outboundSchema.optional(),
  position: z.number().int().optional(),
  externalId: z.string().optional(),
  conditionSignature: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    metadataFieldId: "metadata_field_id",
    externalId: "external_id",
    conditionSignature: "condition_signature",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleResponse$ {
  /** @deprecated use `MetadataRuleResponse$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleResponse$inboundSchema;
  /** @deprecated use `MetadataRuleResponse$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleResponse$outboundSchema;
  /** @deprecated use `MetadataRuleResponse$Outbound` instead. */
  export type Outbound = MetadataRuleResponse$Outbound;
}

export function metadataRuleResponseToJSON(
  metadataRuleResponse: MetadataRuleResponse,
): string {
  return JSON.stringify(
    MetadataRuleResponse$outboundSchema.parse(metadataRuleResponse),
  );
}

export function metadataRuleResponseFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleResponse' from JSON`,
  );
}
