/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
 */
export type MetadataRuleUpdateCondition = {};

/**
 * The result to apply when the condition is met, should adhere to the metadata rule result schema.
 */
export type MetadataRuleUpdateResult = {};

/**
 * The state of the rule.
 */
export const MetadataRuleUpdateState = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The state of the rule.
 */
export type MetadataRuleUpdateState = ClosedEnum<
  typeof MetadataRuleUpdateState
>;

export type MetadataRuleUpdate = {
  /**
   * The ID of the metadata field this rule applies to.
   */
  metadataFieldId?: string | undefined;
  /**
   * A descriptive name for the metadata rule.
   */
  name?: string | undefined;
  /**
   * The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
   */
  condition?: MetadataRuleUpdateCondition | undefined;
  /**
   * The result to apply when the condition is met, should adhere to the metadata rule result schema.
   */
  result?: MetadataRuleUpdateResult | undefined;
  /**
   * The state of the rule.
   */
  state?: MetadataRuleUpdateState | undefined;
  /**
   * The position/order of this rule relative to other rules.
   */
  position?: number | undefined;
  /**
   * The unique identifier of the metadata rule.
   */
  externalId?: string | undefined;
};

/** @internal */
export const MetadataRuleUpdateCondition$inboundSchema: z.ZodType<
  MetadataRuleUpdateCondition,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRuleUpdateCondition$Outbound = {};

/** @internal */
export const MetadataRuleUpdateCondition$outboundSchema: z.ZodType<
  MetadataRuleUpdateCondition$Outbound,
  z.ZodTypeDef,
  MetadataRuleUpdateCondition
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleUpdateCondition$ {
  /** @deprecated use `MetadataRuleUpdateCondition$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleUpdateCondition$inboundSchema;
  /** @deprecated use `MetadataRuleUpdateCondition$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleUpdateCondition$outboundSchema;
  /** @deprecated use `MetadataRuleUpdateCondition$Outbound` instead. */
  export type Outbound = MetadataRuleUpdateCondition$Outbound;
}

export function metadataRuleUpdateConditionToJSON(
  metadataRuleUpdateCondition: MetadataRuleUpdateCondition,
): string {
  return JSON.stringify(
    MetadataRuleUpdateCondition$outboundSchema.parse(
      metadataRuleUpdateCondition,
    ),
  );
}

export function metadataRuleUpdateConditionFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleUpdateCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleUpdateCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleUpdateCondition' from JSON`,
  );
}

/** @internal */
export const MetadataRuleUpdateResult$inboundSchema: z.ZodType<
  MetadataRuleUpdateResult,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRuleUpdateResult$Outbound = {};

/** @internal */
export const MetadataRuleUpdateResult$outboundSchema: z.ZodType<
  MetadataRuleUpdateResult$Outbound,
  z.ZodTypeDef,
  MetadataRuleUpdateResult
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleUpdateResult$ {
  /** @deprecated use `MetadataRuleUpdateResult$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleUpdateResult$inboundSchema;
  /** @deprecated use `MetadataRuleUpdateResult$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleUpdateResult$outboundSchema;
  /** @deprecated use `MetadataRuleUpdateResult$Outbound` instead. */
  export type Outbound = MetadataRuleUpdateResult$Outbound;
}

export function metadataRuleUpdateResultToJSON(
  metadataRuleUpdateResult: MetadataRuleUpdateResult,
): string {
  return JSON.stringify(
    MetadataRuleUpdateResult$outboundSchema.parse(metadataRuleUpdateResult),
  );
}

export function metadataRuleUpdateResultFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleUpdateResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleUpdateResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleUpdateResult' from JSON`,
  );
}

/** @internal */
export const MetadataRuleUpdateState$inboundSchema: z.ZodNativeEnum<
  typeof MetadataRuleUpdateState
> = z.nativeEnum(MetadataRuleUpdateState);

/** @internal */
export const MetadataRuleUpdateState$outboundSchema: z.ZodNativeEnum<
  typeof MetadataRuleUpdateState
> = MetadataRuleUpdateState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleUpdateState$ {
  /** @deprecated use `MetadataRuleUpdateState$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleUpdateState$inboundSchema;
  /** @deprecated use `MetadataRuleUpdateState$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleUpdateState$outboundSchema;
}

/** @internal */
export const MetadataRuleUpdate$inboundSchema: z.ZodType<
  MetadataRuleUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata_field_id: z.string().optional(),
  name: z.string().optional(),
  condition: z.lazy(() => MetadataRuleUpdateCondition$inboundSchema).optional(),
  result: z.lazy(() => MetadataRuleUpdateResult$inboundSchema).optional(),
  state: MetadataRuleUpdateState$inboundSchema.optional(),
  position: z.number().int().optional(),
  external_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "metadata_field_id": "metadataFieldId",
    "external_id": "externalId",
  });
});

/** @internal */
export type MetadataRuleUpdate$Outbound = {
  metadata_field_id?: string | undefined;
  name?: string | undefined;
  condition?: MetadataRuleUpdateCondition$Outbound | undefined;
  result?: MetadataRuleUpdateResult$Outbound | undefined;
  state?: string | undefined;
  position?: number | undefined;
  external_id?: string | undefined;
};

/** @internal */
export const MetadataRuleUpdate$outboundSchema: z.ZodType<
  MetadataRuleUpdate$Outbound,
  z.ZodTypeDef,
  MetadataRuleUpdate
> = z.object({
  metadataFieldId: z.string().optional(),
  name: z.string().optional(),
  condition: z.lazy(() => MetadataRuleUpdateCondition$outboundSchema)
    .optional(),
  result: z.lazy(() => MetadataRuleUpdateResult$outboundSchema).optional(),
  state: MetadataRuleUpdateState$outboundSchema.optional(),
  position: z.number().int().optional(),
  externalId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    metadataFieldId: "metadata_field_id",
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleUpdate$ {
  /** @deprecated use `MetadataRuleUpdate$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleUpdate$inboundSchema;
  /** @deprecated use `MetadataRuleUpdate$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleUpdate$outboundSchema;
  /** @deprecated use `MetadataRuleUpdate$Outbound` instead. */
  export type Outbound = MetadataRuleUpdate$Outbound;
}

export function metadataRuleUpdateToJSON(
  metadataRuleUpdate: MetadataRuleUpdate,
): string {
  return JSON.stringify(
    MetadataRuleUpdate$outboundSchema.parse(metadataRuleUpdate),
  );
}

export function metadataRuleUpdateFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleUpdate' from JSON`,
  );
}
