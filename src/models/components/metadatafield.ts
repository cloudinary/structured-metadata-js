/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the metadata field.
 */
export const Type = {
  String: "string",
  Integer: "integer",
  Date: "date",
  Enum: "enum",
  Set: "set",
} as const;
/**
 * The type of the metadata field.
 */
export type Type = ClosedEnum<typeof Type>;

export type DefaultValue = string | number;

/**
 * The validation defined for the metadata field.
 */
export type Validation = {};

/**
 * The restrictions defined for the metadata field.
 */
export type Restrictions = {
  /**
   * Whether the metadata field is read-only in the UI. when true, the metadata field can only be updated via the API.
   */
  readonlyUi?: boolean | undefined;
};

/**
 * The state of the option.
 */
export const MetadataFieldState = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The state of the option.
 */
export type MetadataFieldState = ClosedEnum<typeof MetadataFieldState>;

export type Value = {
  /**
   * The external ID of the option.
   */
  externalId?: string | undefined;
  /**
   * The value of the option.
   */
  value?: string | undefined;
  /**
   * The position of the option.
   */
  position?: number | undefined;
  /**
   * The state of the option.
   */
  state?: MetadataFieldState | undefined;
};

/**
 * The datasource defined for the metadata field.
 */
export type Datasource = {
  values?: Array<Value> | undefined;
};

export type MetadataField = {
  /**
   * The type of the metadata field.
   */
  type: Type;
  /**
   * The external ID of the metadata field.
   */
  externalId?: string | undefined;
  /**
   * The label of the metadata field.
   */
  label: string;
  /**
   * Whether the metadata field is mandatory.
   */
  mandatory?: boolean | null | undefined;
  /**
   * The default value of the metadata field.
   */
  defaultValue?: string | number | null | undefined;
  /**
   * Whether the default value is disabled.
   */
  defaultDisabled?: boolean | null | undefined;
  /**
   * The validation defined for the metadata field.
   */
  validation?: Validation | null | undefined;
  /**
   * The restrictions defined for the metadata field.
   */
  restrictions?: Restrictions | null | undefined;
  /**
   * The datasource defined for the metadata field.
   */
  datasource?: Datasource | null | undefined;
  /**
   * Whether the metadata field allows adding new options to the datasource dynamically.
   */
  allowDynamicListValues?: boolean | null | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const DefaultValue$inboundSchema: z.ZodType<
  DefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int()]);

/** @internal */
export type DefaultValue$Outbound = string | number;

/** @internal */
export const DefaultValue$outboundSchema: z.ZodType<
  DefaultValue$Outbound,
  z.ZodTypeDef,
  DefaultValue
> = z.union([z.string(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValue$ {
  /** @deprecated use `DefaultValue$inboundSchema` instead. */
  export const inboundSchema = DefaultValue$inboundSchema;
  /** @deprecated use `DefaultValue$outboundSchema` instead. */
  export const outboundSchema = DefaultValue$outboundSchema;
  /** @deprecated use `DefaultValue$Outbound` instead. */
  export type Outbound = DefaultValue$Outbound;
}

export function defaultValueToJSON(defaultValue: DefaultValue): string {
  return JSON.stringify(DefaultValue$outboundSchema.parse(defaultValue));
}

export function defaultValueFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValue' from JSON`,
  );
}

/** @internal */
export const Validation$inboundSchema: z.ZodType<
  Validation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Validation$Outbound = {};

/** @internal */
export const Validation$outboundSchema: z.ZodType<
  Validation$Outbound,
  z.ZodTypeDef,
  Validation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Validation$ {
  /** @deprecated use `Validation$inboundSchema` instead. */
  export const inboundSchema = Validation$inboundSchema;
  /** @deprecated use `Validation$outboundSchema` instead. */
  export const outboundSchema = Validation$outboundSchema;
  /** @deprecated use `Validation$Outbound` instead. */
  export type Outbound = Validation$Outbound;
}

export function validationToJSON(validation: Validation): string {
  return JSON.stringify(Validation$outboundSchema.parse(validation));
}

export function validationFromJSON(
  jsonString: string,
): SafeParseResult<Validation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Validation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Validation' from JSON`,
  );
}

/** @internal */
export const Restrictions$inboundSchema: z.ZodType<
  Restrictions,
  z.ZodTypeDef,
  unknown
> = z.object({
  readonly_ui: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "readonly_ui": "readonlyUi",
  });
});

/** @internal */
export type Restrictions$Outbound = {
  readonly_ui?: boolean | undefined;
};

/** @internal */
export const Restrictions$outboundSchema: z.ZodType<
  Restrictions$Outbound,
  z.ZodTypeDef,
  Restrictions
> = z.object({
  readonlyUi: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    readonlyUi: "readonly_ui",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Restrictions$ {
  /** @deprecated use `Restrictions$inboundSchema` instead. */
  export const inboundSchema = Restrictions$inboundSchema;
  /** @deprecated use `Restrictions$outboundSchema` instead. */
  export const outboundSchema = Restrictions$outboundSchema;
  /** @deprecated use `Restrictions$Outbound` instead. */
  export type Outbound = Restrictions$Outbound;
}

export function restrictionsToJSON(restrictions: Restrictions): string {
  return JSON.stringify(Restrictions$outboundSchema.parse(restrictions));
}

export function restrictionsFromJSON(
  jsonString: string,
): SafeParseResult<Restrictions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Restrictions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Restrictions' from JSON`,
  );
}

/** @internal */
export const MetadataFieldState$inboundSchema: z.ZodNativeEnum<
  typeof MetadataFieldState
> = z.nativeEnum(MetadataFieldState);

/** @internal */
export const MetadataFieldState$outboundSchema: z.ZodNativeEnum<
  typeof MetadataFieldState
> = MetadataFieldState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataFieldState$ {
  /** @deprecated use `MetadataFieldState$inboundSchema` instead. */
  export const inboundSchema = MetadataFieldState$inboundSchema;
  /** @deprecated use `MetadataFieldState$outboundSchema` instead. */
  export const outboundSchema = MetadataFieldState$outboundSchema;
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .object({
    external_id: z.string().optional(),
    value: z.string().optional(),
    position: z.number().int().optional(),
    state: MetadataFieldState$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "external_id": "externalId",
    });
  });

/** @internal */
export type Value$Outbound = {
  external_id?: string | undefined;
  value?: string | undefined;
  position?: number | undefined;
  state?: string | undefined;
};

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.object({
  externalId: z.string().optional(),
  value: z.string().optional(),
  position: z.number().int().optional(),
  state: MetadataFieldState$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const Datasource$inboundSchema: z.ZodType<
  Datasource,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.lazy(() => Value$inboundSchema)).optional(),
});

/** @internal */
export type Datasource$Outbound = {
  values?: Array<Value$Outbound> | undefined;
};

/** @internal */
export const Datasource$outboundSchema: z.ZodType<
  Datasource$Outbound,
  z.ZodTypeDef,
  Datasource
> = z.object({
  values: z.array(z.lazy(() => Value$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Datasource$ {
  /** @deprecated use `Datasource$inboundSchema` instead. */
  export const inboundSchema = Datasource$inboundSchema;
  /** @deprecated use `Datasource$outboundSchema` instead. */
  export const outboundSchema = Datasource$outboundSchema;
  /** @deprecated use `Datasource$Outbound` instead. */
  export type Outbound = Datasource$Outbound;
}

export function datasourceToJSON(datasource: Datasource): string {
  return JSON.stringify(Datasource$outboundSchema.parse(datasource));
}

export function datasourceFromJSON(
  jsonString: string,
): SafeParseResult<Datasource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Datasource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Datasource' from JSON`,
  );
}

/** @internal */
export const MetadataField$inboundSchema: z.ZodType<
  MetadataField,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type$inboundSchema,
  external_id: z.string().optional(),
  label: z.string(),
  mandatory: z.nullable(z.boolean()).optional(),
  default_value: z.nullable(z.union([z.string(), z.number().int()])).optional(),
  default_disabled: z.nullable(z.boolean()).optional(),
  validation: z.nullable(z.lazy(() => Validation$inboundSchema)).optional(),
  restrictions: z.nullable(z.lazy(() => Restrictions$inboundSchema)).optional(),
  datasource: z.nullable(z.lazy(() => Datasource$inboundSchema)).optional(),
  allow_dynamic_list_values: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "default_value": "defaultValue",
    "default_disabled": "defaultDisabled",
    "allow_dynamic_list_values": "allowDynamicListValues",
  });
});

/** @internal */
export type MetadataField$Outbound = {
  type: string;
  external_id?: string | undefined;
  label: string;
  mandatory?: boolean | null | undefined;
  default_value?: string | number | null | undefined;
  default_disabled?: boolean | null | undefined;
  validation?: Validation$Outbound | null | undefined;
  restrictions?: Restrictions$Outbound | null | undefined;
  datasource?: Datasource$Outbound | null | undefined;
  allow_dynamic_list_values?: boolean | null | undefined;
};

/** @internal */
export const MetadataField$outboundSchema: z.ZodType<
  MetadataField$Outbound,
  z.ZodTypeDef,
  MetadataField
> = z.object({
  type: Type$outboundSchema,
  externalId: z.string().optional(),
  label: z.string(),
  mandatory: z.nullable(z.boolean()).optional(),
  defaultValue: z.nullable(z.union([z.string(), z.number().int()])).optional(),
  defaultDisabled: z.nullable(z.boolean()).optional(),
  validation: z.nullable(z.lazy(() => Validation$outboundSchema)).optional(),
  restrictions: z.nullable(z.lazy(() => Restrictions$outboundSchema))
    .optional(),
  datasource: z.nullable(z.lazy(() => Datasource$outboundSchema)).optional(),
  allowDynamicListValues: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    defaultValue: "default_value",
    defaultDisabled: "default_disabled",
    allowDynamicListValues: "allow_dynamic_list_values",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataField$ {
  /** @deprecated use `MetadataField$inboundSchema` instead. */
  export const inboundSchema = MetadataField$inboundSchema;
  /** @deprecated use `MetadataField$outboundSchema` instead. */
  export const outboundSchema = MetadataField$outboundSchema;
  /** @deprecated use `MetadataField$Outbound` instead. */
  export type Outbound = MetadataField$Outbound;
}

export function metadataFieldToJSON(metadataField: MetadataField): string {
  return JSON.stringify(MetadataField$outboundSchema.parse(metadataField));
}

export function metadataFieldFromJSON(
  jsonString: string,
): SafeParseResult<MetadataField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataField' from JSON`,
  );
}
