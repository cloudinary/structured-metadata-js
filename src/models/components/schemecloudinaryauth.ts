/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SchemeCloudinaryAuth = {
  apiKey: string;
  apiSecret: string;
};

/** @internal */
export const SchemeCloudinaryAuth$inboundSchema: z.ZodType<
  SchemeCloudinaryAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string(),
  api_secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "api_secret": "apiSecret",
  });
});

/** @internal */
export type SchemeCloudinaryAuth$Outbound = {
  api_key: string;
  api_secret: string;
};

/** @internal */
export const SchemeCloudinaryAuth$outboundSchema: z.ZodType<
  SchemeCloudinaryAuth$Outbound,
  z.ZodTypeDef,
  SchemeCloudinaryAuth
> = z.object({
  apiKey: z.string(),
  apiSecret: z.string(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    apiSecret: "api_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemeCloudinaryAuth$ {
  /** @deprecated use `SchemeCloudinaryAuth$inboundSchema` instead. */
  export const inboundSchema = SchemeCloudinaryAuth$inboundSchema;
  /** @deprecated use `SchemeCloudinaryAuth$outboundSchema` instead. */
  export const outboundSchema = SchemeCloudinaryAuth$outboundSchema;
  /** @deprecated use `SchemeCloudinaryAuth$Outbound` instead. */
  export type Outbound = SchemeCloudinaryAuth$Outbound;
}

export function schemeCloudinaryAuthToJSON(
  schemeCloudinaryAuth: SchemeCloudinaryAuth,
): string {
  return JSON.stringify(
    SchemeCloudinaryAuth$outboundSchema.parse(schemeCloudinaryAuth),
  );
}

export function schemeCloudinaryAuthFromJSON(
  jsonString: string,
): SafeParseResult<SchemeCloudinaryAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemeCloudinaryAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemeCloudinaryAuth' from JSON`,
  );
}
