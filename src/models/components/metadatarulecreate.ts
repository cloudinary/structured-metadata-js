/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
 */
export type MetadataRuleCreateCondition = {};

/**
 * The result to apply when the condition is met, should adhere to the metadata rule result schema.
 */
export type MetadataRuleCreateResult = {};

/**
 * The state of the rule.
 */
export const MetadataRuleCreateState = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The state of the rule.
 */
export type MetadataRuleCreateState = ClosedEnum<
  typeof MetadataRuleCreateState
>;

export type MetadataRuleCreate = {
  /**
   * The ID of the metadata field this rule applies to.
   */
  metadataFieldId: string;
  /**
   * A descriptive name for the metadata rule.
   */
  name: string;
  /**
   * The condition that triggers this rule. Ensure it adheres to the metadata rule condition schema.
   */
  condition: MetadataRuleCreateCondition;
  /**
   * The result to apply when the condition is met, should adhere to the metadata rule result schema.
   */
  result: MetadataRuleCreateResult;
  /**
   * The state of the rule.
   */
  state?: MetadataRuleCreateState | undefined;
  /**
   * The position/order of this rule relative to other rules.
   */
  position?: number | undefined;
};

/** @internal */
export const MetadataRuleCreateCondition$inboundSchema: z.ZodType<
  MetadataRuleCreateCondition,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRuleCreateCondition$Outbound = {};

/** @internal */
export const MetadataRuleCreateCondition$outboundSchema: z.ZodType<
  MetadataRuleCreateCondition$Outbound,
  z.ZodTypeDef,
  MetadataRuleCreateCondition
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleCreateCondition$ {
  /** @deprecated use `MetadataRuleCreateCondition$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleCreateCondition$inboundSchema;
  /** @deprecated use `MetadataRuleCreateCondition$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleCreateCondition$outboundSchema;
  /** @deprecated use `MetadataRuleCreateCondition$Outbound` instead. */
  export type Outbound = MetadataRuleCreateCondition$Outbound;
}

export function metadataRuleCreateConditionToJSON(
  metadataRuleCreateCondition: MetadataRuleCreateCondition,
): string {
  return JSON.stringify(
    MetadataRuleCreateCondition$outboundSchema.parse(
      metadataRuleCreateCondition,
    ),
  );
}

export function metadataRuleCreateConditionFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleCreateCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleCreateCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleCreateCondition' from JSON`,
  );
}

/** @internal */
export const MetadataRuleCreateResult$inboundSchema: z.ZodType<
  MetadataRuleCreateResult,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MetadataRuleCreateResult$Outbound = {};

/** @internal */
export const MetadataRuleCreateResult$outboundSchema: z.ZodType<
  MetadataRuleCreateResult$Outbound,
  z.ZodTypeDef,
  MetadataRuleCreateResult
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleCreateResult$ {
  /** @deprecated use `MetadataRuleCreateResult$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleCreateResult$inboundSchema;
  /** @deprecated use `MetadataRuleCreateResult$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleCreateResult$outboundSchema;
  /** @deprecated use `MetadataRuleCreateResult$Outbound` instead. */
  export type Outbound = MetadataRuleCreateResult$Outbound;
}

export function metadataRuleCreateResultToJSON(
  metadataRuleCreateResult: MetadataRuleCreateResult,
): string {
  return JSON.stringify(
    MetadataRuleCreateResult$outboundSchema.parse(metadataRuleCreateResult),
  );
}

export function metadataRuleCreateResultFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleCreateResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleCreateResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleCreateResult' from JSON`,
  );
}

/** @internal */
export const MetadataRuleCreateState$inboundSchema: z.ZodNativeEnum<
  typeof MetadataRuleCreateState
> = z.nativeEnum(MetadataRuleCreateState);

/** @internal */
export const MetadataRuleCreateState$outboundSchema: z.ZodNativeEnum<
  typeof MetadataRuleCreateState
> = MetadataRuleCreateState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleCreateState$ {
  /** @deprecated use `MetadataRuleCreateState$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleCreateState$inboundSchema;
  /** @deprecated use `MetadataRuleCreateState$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleCreateState$outboundSchema;
}

/** @internal */
export const MetadataRuleCreate$inboundSchema: z.ZodType<
  MetadataRuleCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata_field_id: z.string(),
  name: z.string(),
  condition: z.lazy(() => MetadataRuleCreateCondition$inboundSchema),
  result: z.lazy(() => MetadataRuleCreateResult$inboundSchema),
  state: MetadataRuleCreateState$inboundSchema.optional(),
  position: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "metadata_field_id": "metadataFieldId",
  });
});

/** @internal */
export type MetadataRuleCreate$Outbound = {
  metadata_field_id: string;
  name: string;
  condition: MetadataRuleCreateCondition$Outbound;
  result: MetadataRuleCreateResult$Outbound;
  state?: string | undefined;
  position?: number | undefined;
};

/** @internal */
export const MetadataRuleCreate$outboundSchema: z.ZodType<
  MetadataRuleCreate$Outbound,
  z.ZodTypeDef,
  MetadataRuleCreate
> = z.object({
  metadataFieldId: z.string(),
  name: z.string(),
  condition: z.lazy(() => MetadataRuleCreateCondition$outboundSchema),
  result: z.lazy(() => MetadataRuleCreateResult$outboundSchema),
  state: MetadataRuleCreateState$outboundSchema.optional(),
  position: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    metadataFieldId: "metadata_field_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataRuleCreate$ {
  /** @deprecated use `MetadataRuleCreate$inboundSchema` instead. */
  export const inboundSchema = MetadataRuleCreate$inboundSchema;
  /** @deprecated use `MetadataRuleCreate$outboundSchema` instead. */
  export const outboundSchema = MetadataRuleCreate$outboundSchema;
  /** @deprecated use `MetadataRuleCreate$Outbound` instead. */
  export type Outbound = MetadataRuleCreate$Outbound;
}

export function metadataRuleCreateToJSON(
  metadataRuleCreate: MetadataRuleCreate,
): string {
  return JSON.stringify(
    MetadataRuleCreate$outboundSchema.parse(metadataRuleCreate),
  );
}

export function metadataRuleCreateFromJSON(
  jsonString: string,
): SafeParseResult<MetadataRuleCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataRuleCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataRuleCreate' from JSON`,
  );
}
