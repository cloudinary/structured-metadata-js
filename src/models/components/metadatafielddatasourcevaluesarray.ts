/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MetadataFieldDatasourceValue,
  MetadataFieldDatasourceValue$inboundSchema,
  MetadataFieldDatasourceValue$Outbound,
  MetadataFieldDatasourceValue$outboundSchema,
} from "./metadatafielddatasourcevalue.js";

export type MetadataFieldDatasourceValuesArray = {
  values?: Array<MetadataFieldDatasourceValue> | undefined;
};

/** @internal */
export const MetadataFieldDatasourceValuesArray$inboundSchema: z.ZodType<
  MetadataFieldDatasourceValuesArray,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(MetadataFieldDatasourceValue$inboundSchema).optional(),
});

/** @internal */
export type MetadataFieldDatasourceValuesArray$Outbound = {
  values?: Array<MetadataFieldDatasourceValue$Outbound> | undefined;
};

/** @internal */
export const MetadataFieldDatasourceValuesArray$outboundSchema: z.ZodType<
  MetadataFieldDatasourceValuesArray$Outbound,
  z.ZodTypeDef,
  MetadataFieldDatasourceValuesArray
> = z.object({
  values: z.array(MetadataFieldDatasourceValue$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataFieldDatasourceValuesArray$ {
  /** @deprecated use `MetadataFieldDatasourceValuesArray$inboundSchema` instead. */
  export const inboundSchema = MetadataFieldDatasourceValuesArray$inboundSchema;
  /** @deprecated use `MetadataFieldDatasourceValuesArray$outboundSchema` instead. */
  export const outboundSchema =
    MetadataFieldDatasourceValuesArray$outboundSchema;
  /** @deprecated use `MetadataFieldDatasourceValuesArray$Outbound` instead. */
  export type Outbound = MetadataFieldDatasourceValuesArray$Outbound;
}

export function metadataFieldDatasourceValuesArrayToJSON(
  metadataFieldDatasourceValuesArray: MetadataFieldDatasourceValuesArray,
): string {
  return JSON.stringify(
    MetadataFieldDatasourceValuesArray$outboundSchema.parse(
      metadataFieldDatasourceValuesArray,
    ),
  );
}

export function metadataFieldDatasourceValuesArrayFromJSON(
  jsonString: string,
): SafeParseResult<MetadataFieldDatasourceValuesArray, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetadataFieldDatasourceValuesArray$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataFieldDatasourceValuesArray' from JSON`,
  );
}
