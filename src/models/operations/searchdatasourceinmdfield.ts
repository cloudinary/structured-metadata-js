/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchDatasourceInMDFieldGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * Metadata payload for rule-based inference
 */
export type Payload = {};

export type SearchDatasourceInMDFieldRequestBody = {
  /**
   * Metadata payload for rule-based inference
   */
  payload?: Payload | undefined;
};

export type SearchDatasourceInMDFieldRequest = {
  /**
   * The external ID of the metadata field to search the datasource for.
   */
  externalId: string;
  /**
   * The maximum number of results to return.
   */
  maxResults?: number | undefined;
  /**
   * The term to search for. can be any substring of the value.
   */
  term?: string | undefined;
  /**
   * Whether to search for an exact match.
   */
  exactMatch?: boolean | undefined;
  requestBody: SearchDatasourceInMDFieldRequestBody;
};

/** @internal */
export const SearchDatasourceInMDFieldGlobals$inboundSchema: z.ZodType<
  SearchDatasourceInMDFieldGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type SearchDatasourceInMDFieldGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const SearchDatasourceInMDFieldGlobals$outboundSchema: z.ZodType<
  SearchDatasourceInMDFieldGlobals$Outbound,
  z.ZodTypeDef,
  SearchDatasourceInMDFieldGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDatasourceInMDFieldGlobals$ {
  /** @deprecated use `SearchDatasourceInMDFieldGlobals$inboundSchema` instead. */
  export const inboundSchema = SearchDatasourceInMDFieldGlobals$inboundSchema;
  /** @deprecated use `SearchDatasourceInMDFieldGlobals$outboundSchema` instead. */
  export const outboundSchema = SearchDatasourceInMDFieldGlobals$outboundSchema;
  /** @deprecated use `SearchDatasourceInMDFieldGlobals$Outbound` instead. */
  export type Outbound = SearchDatasourceInMDFieldGlobals$Outbound;
}

export function searchDatasourceInMDFieldGlobalsToJSON(
  searchDatasourceInMDFieldGlobals: SearchDatasourceInMDFieldGlobals,
): string {
  return JSON.stringify(
    SearchDatasourceInMDFieldGlobals$outboundSchema.parse(
      searchDatasourceInMDFieldGlobals,
    ),
  );
}

export function searchDatasourceInMDFieldGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<SearchDatasourceInMDFieldGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchDatasourceInMDFieldGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDatasourceInMDFieldGlobals' from JSON`,
  );
}

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Payload$Outbound = {};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const SearchDatasourceInMDFieldRequestBody$inboundSchema: z.ZodType<
  SearchDatasourceInMDFieldRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  payload: z.lazy(() => Payload$inboundSchema).optional(),
});

/** @internal */
export type SearchDatasourceInMDFieldRequestBody$Outbound = {
  payload?: Payload$Outbound | undefined;
};

/** @internal */
export const SearchDatasourceInMDFieldRequestBody$outboundSchema: z.ZodType<
  SearchDatasourceInMDFieldRequestBody$Outbound,
  z.ZodTypeDef,
  SearchDatasourceInMDFieldRequestBody
> = z.object({
  payload: z.lazy(() => Payload$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDatasourceInMDFieldRequestBody$ {
  /** @deprecated use `SearchDatasourceInMDFieldRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    SearchDatasourceInMDFieldRequestBody$inboundSchema;
  /** @deprecated use `SearchDatasourceInMDFieldRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    SearchDatasourceInMDFieldRequestBody$outboundSchema;
  /** @deprecated use `SearchDatasourceInMDFieldRequestBody$Outbound` instead. */
  export type Outbound = SearchDatasourceInMDFieldRequestBody$Outbound;
}

export function searchDatasourceInMDFieldRequestBodyToJSON(
  searchDatasourceInMDFieldRequestBody: SearchDatasourceInMDFieldRequestBody,
): string {
  return JSON.stringify(
    SearchDatasourceInMDFieldRequestBody$outboundSchema.parse(
      searchDatasourceInMDFieldRequestBody,
    ),
  );
}

export function searchDatasourceInMDFieldRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SearchDatasourceInMDFieldRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SearchDatasourceInMDFieldRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDatasourceInMDFieldRequestBody' from JSON`,
  );
}

/** @internal */
export const SearchDatasourceInMDFieldRequest$inboundSchema: z.ZodType<
  SearchDatasourceInMDFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  max_results: z.number().int().default(255),
  term: z.string().optional(),
  exact_match: z.boolean().default(false),
  RequestBody: z.lazy(() => SearchDatasourceInMDFieldRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "max_results": "maxResults",
    "exact_match": "exactMatch",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SearchDatasourceInMDFieldRequest$Outbound = {
  external_id: string;
  max_results: number;
  term?: string | undefined;
  exact_match: boolean;
  RequestBody: SearchDatasourceInMDFieldRequestBody$Outbound;
};

/** @internal */
export const SearchDatasourceInMDFieldRequest$outboundSchema: z.ZodType<
  SearchDatasourceInMDFieldRequest$Outbound,
  z.ZodTypeDef,
  SearchDatasourceInMDFieldRequest
> = z.object({
  externalId: z.string(),
  maxResults: z.number().int().default(255),
  term: z.string().optional(),
  exactMatch: z.boolean().default(false),
  requestBody: z.lazy(() =>
    SearchDatasourceInMDFieldRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    maxResults: "max_results",
    exactMatch: "exact_match",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchDatasourceInMDFieldRequest$ {
  /** @deprecated use `SearchDatasourceInMDFieldRequest$inboundSchema` instead. */
  export const inboundSchema = SearchDatasourceInMDFieldRequest$inboundSchema;
  /** @deprecated use `SearchDatasourceInMDFieldRequest$outboundSchema` instead. */
  export const outboundSchema = SearchDatasourceInMDFieldRequest$outboundSchema;
  /** @deprecated use `SearchDatasourceInMDFieldRequest$Outbound` instead. */
  export type Outbound = SearchDatasourceInMDFieldRequest$Outbound;
}

export function searchDatasourceInMDFieldRequestToJSON(
  searchDatasourceInMDFieldRequest: SearchDatasourceInMDFieldRequest,
): string {
  return JSON.stringify(
    SearchDatasourceInMDFieldRequest$outboundSchema.parse(
      searchDatasourceInMDFieldRequest,
    ),
  );
}

export function searchDatasourceInMDFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchDatasourceInMDFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchDatasourceInMDFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchDatasourceInMDFieldRequest' from JSON`,
  );
}
