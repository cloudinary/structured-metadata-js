/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMetadataRuleGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteMetadataRuleRequest = {
  /**
   * The unique identifier of the metadata rule.
   */
  externalId: string;
};

/**
 * metadata rule deleted.
 */
export type DeleteMetadataRuleResponse = {
  success: boolean;
};

/** @internal */
export const DeleteMetadataRuleGlobals$inboundSchema: z.ZodType<
  DeleteMetadataRuleGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteMetadataRuleGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteMetadataRuleGlobals$outboundSchema: z.ZodType<
  DeleteMetadataRuleGlobals$Outbound,
  z.ZodTypeDef,
  DeleteMetadataRuleGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMetadataRuleGlobals$ {
  /** @deprecated use `DeleteMetadataRuleGlobals$inboundSchema` instead. */
  export const inboundSchema = DeleteMetadataRuleGlobals$inboundSchema;
  /** @deprecated use `DeleteMetadataRuleGlobals$outboundSchema` instead. */
  export const outboundSchema = DeleteMetadataRuleGlobals$outboundSchema;
  /** @deprecated use `DeleteMetadataRuleGlobals$Outbound` instead. */
  export type Outbound = DeleteMetadataRuleGlobals$Outbound;
}

export function deleteMetadataRuleGlobalsToJSON(
  deleteMetadataRuleGlobals: DeleteMetadataRuleGlobals,
): string {
  return JSON.stringify(
    DeleteMetadataRuleGlobals$outboundSchema.parse(deleteMetadataRuleGlobals),
  );
}

export function deleteMetadataRuleGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMetadataRuleGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMetadataRuleGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMetadataRuleGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteMetadataRuleRequest$inboundSchema: z.ZodType<
  DeleteMetadataRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type DeleteMetadataRuleRequest$Outbound = {
  external_id: string;
};

/** @internal */
export const DeleteMetadataRuleRequest$outboundSchema: z.ZodType<
  DeleteMetadataRuleRequest$Outbound,
  z.ZodTypeDef,
  DeleteMetadataRuleRequest
> = z.object({
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMetadataRuleRequest$ {
  /** @deprecated use `DeleteMetadataRuleRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMetadataRuleRequest$inboundSchema;
  /** @deprecated use `DeleteMetadataRuleRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMetadataRuleRequest$outboundSchema;
  /** @deprecated use `DeleteMetadataRuleRequest$Outbound` instead. */
  export type Outbound = DeleteMetadataRuleRequest$Outbound;
}

export function deleteMetadataRuleRequestToJSON(
  deleteMetadataRuleRequest: DeleteMetadataRuleRequest,
): string {
  return JSON.stringify(
    DeleteMetadataRuleRequest$outboundSchema.parse(deleteMetadataRuleRequest),
  );
}

export function deleteMetadataRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMetadataRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMetadataRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMetadataRuleRequest' from JSON`,
  );
}

/** @internal */
export const DeleteMetadataRuleResponse$inboundSchema: z.ZodType<
  DeleteMetadataRuleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type DeleteMetadataRuleResponse$Outbound = {
  success: boolean;
};

/** @internal */
export const DeleteMetadataRuleResponse$outboundSchema: z.ZodType<
  DeleteMetadataRuleResponse$Outbound,
  z.ZodTypeDef,
  DeleteMetadataRuleResponse
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMetadataRuleResponse$ {
  /** @deprecated use `DeleteMetadataRuleResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteMetadataRuleResponse$inboundSchema;
  /** @deprecated use `DeleteMetadataRuleResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteMetadataRuleResponse$outboundSchema;
  /** @deprecated use `DeleteMetadataRuleResponse$Outbound` instead. */
  export type Outbound = DeleteMetadataRuleResponse$Outbound;
}

export function deleteMetadataRuleResponseToJSON(
  deleteMetadataRuleResponse: DeleteMetadataRuleResponse,
): string {
  return JSON.stringify(
    DeleteMetadataRuleResponse$outboundSchema.parse(deleteMetadataRuleResponse),
  );
}

export function deleteMetadataRuleResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMetadataRuleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMetadataRuleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMetadataRuleResponse' from JSON`,
  );
}
