/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateMetadataFieldDatasourceGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/**
 * The state of the option.
 */
export const State = {
  Active: "active",
  Inactive: "inactive",
} as const;
/**
 * The state of the option.
 */
export type State = ClosedEnum<typeof State>;

export type Value = {
  /**
   * The external ID of the datasource value.
   */
  externalId?: string | undefined;
  /**
   * The value of the option.
   */
  value?: string | undefined;
  /**
   * The position of the option.
   */
  position?: number | undefined;
  /**
   * The state of the option.
   */
  state?: State | undefined;
};

export type UpdateMetadataFieldDatasourceRequestBody = {
  values?: Array<Value> | undefined;
};

export type UpdateMetadataFieldDatasourceRequest = {
  /**
   * The external ID of the metadata field to update the datasource for.
   */
  externalId: string;
  requestBody: UpdateMetadataFieldDatasourceRequestBody;
};

/**
 * datasource updated
 */
export type UpdateMetadataFieldDatasourceResponse = {
  values?: Array<components.MetadataFieldDatasourceValue> | undefined;
};

/** @internal */
export const UpdateMetadataFieldDatasourceGlobals$inboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UpdateMetadataFieldDatasourceGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UpdateMetadataFieldDatasourceGlobals$outboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceGlobals$Outbound,
  z.ZodTypeDef,
  UpdateMetadataFieldDatasourceGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMetadataFieldDatasourceGlobals$ {
  /** @deprecated use `UpdateMetadataFieldDatasourceGlobals$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMetadataFieldDatasourceGlobals$inboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceGlobals$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMetadataFieldDatasourceGlobals$outboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceGlobals$Outbound` instead. */
  export type Outbound = UpdateMetadataFieldDatasourceGlobals$Outbound;
}

export function updateMetadataFieldDatasourceGlobalsToJSON(
  updateMetadataFieldDatasourceGlobals: UpdateMetadataFieldDatasourceGlobals,
): string {
  return JSON.stringify(
    UpdateMetadataFieldDatasourceGlobals$outboundSchema.parse(
      updateMetadataFieldDatasourceGlobals,
    ),
  );
}

export function updateMetadataFieldDatasourceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMetadataFieldDatasourceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMetadataFieldDatasourceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMetadataFieldDatasourceGlobals' from JSON`,
  );
}

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .object({
    external_id: z.string().optional(),
    value: z.string().optional(),
    position: z.number().int().optional(),
    state: State$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "external_id": "externalId",
    });
  });

/** @internal */
export type Value$Outbound = {
  external_id?: string | undefined;
  value?: string | undefined;
  position?: number | undefined;
  state?: string | undefined;
};

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.object({
  externalId: z.string().optional(),
  value: z.string().optional(),
  position: z.number().int().optional(),
  state: State$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const UpdateMetadataFieldDatasourceRequestBody$inboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.lazy(() => Value$inboundSchema)).optional(),
});

/** @internal */
export type UpdateMetadataFieldDatasourceRequestBody$Outbound = {
  values?: Array<Value$Outbound> | undefined;
};

/** @internal */
export const UpdateMetadataFieldDatasourceRequestBody$outboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateMetadataFieldDatasourceRequestBody
> = z.object({
  values: z.array(z.lazy(() => Value$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMetadataFieldDatasourceRequestBody$ {
  /** @deprecated use `UpdateMetadataFieldDatasourceRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMetadataFieldDatasourceRequestBody$inboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMetadataFieldDatasourceRequestBody$outboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceRequestBody$Outbound` instead. */
  export type Outbound = UpdateMetadataFieldDatasourceRequestBody$Outbound;
}

export function updateMetadataFieldDatasourceRequestBodyToJSON(
  updateMetadataFieldDatasourceRequestBody:
    UpdateMetadataFieldDatasourceRequestBody,
): string {
  return JSON.stringify(
    UpdateMetadataFieldDatasourceRequestBody$outboundSchema.parse(
      updateMetadataFieldDatasourceRequestBody,
    ),
  );
}

export function updateMetadataFieldDatasourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateMetadataFieldDatasourceRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMetadataFieldDatasourceRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateMetadataFieldDatasourceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateMetadataFieldDatasourceRequest$inboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  RequestBody: z.lazy(() =>
    UpdateMetadataFieldDatasourceRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateMetadataFieldDatasourceRequest$Outbound = {
  external_id: string;
  RequestBody: UpdateMetadataFieldDatasourceRequestBody$Outbound;
};

/** @internal */
export const UpdateMetadataFieldDatasourceRequest$outboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceRequest$Outbound,
  z.ZodTypeDef,
  UpdateMetadataFieldDatasourceRequest
> = z.object({
  externalId: z.string(),
  requestBody: z.lazy(() =>
    UpdateMetadataFieldDatasourceRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMetadataFieldDatasourceRequest$ {
  /** @deprecated use `UpdateMetadataFieldDatasourceRequest$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMetadataFieldDatasourceRequest$inboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMetadataFieldDatasourceRequest$outboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceRequest$Outbound` instead. */
  export type Outbound = UpdateMetadataFieldDatasourceRequest$Outbound;
}

export function updateMetadataFieldDatasourceRequestToJSON(
  updateMetadataFieldDatasourceRequest: UpdateMetadataFieldDatasourceRequest,
): string {
  return JSON.stringify(
    UpdateMetadataFieldDatasourceRequest$outboundSchema.parse(
      updateMetadataFieldDatasourceRequest,
    ),
  );
}

export function updateMetadataFieldDatasourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMetadataFieldDatasourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMetadataFieldDatasourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMetadataFieldDatasourceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateMetadataFieldDatasourceResponse$inboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(components.MetadataFieldDatasourceValue$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateMetadataFieldDatasourceResponse$Outbound = {
  values?: Array<components.MetadataFieldDatasourceValue$Outbound> | undefined;
};

/** @internal */
export const UpdateMetadataFieldDatasourceResponse$outboundSchema: z.ZodType<
  UpdateMetadataFieldDatasourceResponse$Outbound,
  z.ZodTypeDef,
  UpdateMetadataFieldDatasourceResponse
> = z.object({
  values: z.array(components.MetadataFieldDatasourceValue$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMetadataFieldDatasourceResponse$ {
  /** @deprecated use `UpdateMetadataFieldDatasourceResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateMetadataFieldDatasourceResponse$inboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateMetadataFieldDatasourceResponse$outboundSchema;
  /** @deprecated use `UpdateMetadataFieldDatasourceResponse$Outbound` instead. */
  export type Outbound = UpdateMetadataFieldDatasourceResponse$Outbound;
}

export function updateMetadataFieldDatasourceResponseToJSON(
  updateMetadataFieldDatasourceResponse: UpdateMetadataFieldDatasourceResponse,
): string {
  return JSON.stringify(
    UpdateMetadataFieldDatasourceResponse$outboundSchema.parse(
      updateMetadataFieldDatasourceResponse,
    ),
  );
}

export function updateMetadataFieldDatasourceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMetadataFieldDatasourceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateMetadataFieldDatasourceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMetadataFieldDatasourceResponse' from JSON`,
  );
}
