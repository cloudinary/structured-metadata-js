/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateMetadataRuleGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

/** @internal */
export const CreateMetadataRuleGlobals$inboundSchema: z.ZodType<
  CreateMetadataRuleGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type CreateMetadataRuleGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const CreateMetadataRuleGlobals$outboundSchema: z.ZodType<
  CreateMetadataRuleGlobals$Outbound,
  z.ZodTypeDef,
  CreateMetadataRuleGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMetadataRuleGlobals$ {
  /** @deprecated use `CreateMetadataRuleGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateMetadataRuleGlobals$inboundSchema;
  /** @deprecated use `CreateMetadataRuleGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateMetadataRuleGlobals$outboundSchema;
  /** @deprecated use `CreateMetadataRuleGlobals$Outbound` instead. */
  export type Outbound = CreateMetadataRuleGlobals$Outbound;
}

export function createMetadataRuleGlobalsToJSON(
  createMetadataRuleGlobals: CreateMetadataRuleGlobals,
): string {
  return JSON.stringify(
    CreateMetadataRuleGlobals$outboundSchema.parse(createMetadataRuleGlobals),
  );
}

export function createMetadataRuleGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateMetadataRuleGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMetadataRuleGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMetadataRuleGlobals' from JSON`,
  );
}
