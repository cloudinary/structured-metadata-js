/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateMetadataRuleGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type UpdateMetadataRuleRequest = {
  /**
   * The unique identifier of the metadata rule.
   */
  externalId: string;
  metadataRuleUpdate: components.MetadataRuleUpdate;
};

/** @internal */
export const UpdateMetadataRuleGlobals$inboundSchema: z.ZodType<
  UpdateMetadataRuleGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type UpdateMetadataRuleGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const UpdateMetadataRuleGlobals$outboundSchema: z.ZodType<
  UpdateMetadataRuleGlobals$Outbound,
  z.ZodTypeDef,
  UpdateMetadataRuleGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMetadataRuleGlobals$ {
  /** @deprecated use `UpdateMetadataRuleGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateMetadataRuleGlobals$inboundSchema;
  /** @deprecated use `UpdateMetadataRuleGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateMetadataRuleGlobals$outboundSchema;
  /** @deprecated use `UpdateMetadataRuleGlobals$Outbound` instead. */
  export type Outbound = UpdateMetadataRuleGlobals$Outbound;
}

export function updateMetadataRuleGlobalsToJSON(
  updateMetadataRuleGlobals: UpdateMetadataRuleGlobals,
): string {
  return JSON.stringify(
    UpdateMetadataRuleGlobals$outboundSchema.parse(updateMetadataRuleGlobals),
  );
}

export function updateMetadataRuleGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMetadataRuleGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMetadataRuleGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMetadataRuleGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateMetadataRuleRequest$inboundSchema: z.ZodType<
  UpdateMetadataRuleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  metadata_rule_update: components.MetadataRuleUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "metadata_rule_update": "metadataRuleUpdate",
  });
});

/** @internal */
export type UpdateMetadataRuleRequest$Outbound = {
  external_id: string;
  metadata_rule_update: components.MetadataRuleUpdate$Outbound;
};

/** @internal */
export const UpdateMetadataRuleRequest$outboundSchema: z.ZodType<
  UpdateMetadataRuleRequest$Outbound,
  z.ZodTypeDef,
  UpdateMetadataRuleRequest
> = z.object({
  externalId: z.string(),
  metadataRuleUpdate: components.MetadataRuleUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    metadataRuleUpdate: "metadata_rule_update",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMetadataRuleRequest$ {
  /** @deprecated use `UpdateMetadataRuleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMetadataRuleRequest$inboundSchema;
  /** @deprecated use `UpdateMetadataRuleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMetadataRuleRequest$outboundSchema;
  /** @deprecated use `UpdateMetadataRuleRequest$Outbound` instead. */
  export type Outbound = UpdateMetadataRuleRequest$Outbound;
}

export function updateMetadataRuleRequestToJSON(
  updateMetadataRuleRequest: UpdateMetadataRuleRequest,
): string {
  return JSON.stringify(
    UpdateMetadataRuleRequest$outboundSchema.parse(updateMetadataRuleRequest),
  );
}

export function updateMetadataRuleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMetadataRuleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMetadataRuleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMetadataRuleRequest' from JSON`,
  );
}
