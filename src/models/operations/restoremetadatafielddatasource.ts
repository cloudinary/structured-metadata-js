/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RestoreMetadataFieldDatasourceGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type RestoreMetadataFieldDatasourceRequestBody = {
  /**
   * The external IDs of the datasource values to restore.
   */
  externalIds?: Array<string> | undefined;
};

export type RestoreMetadataFieldDatasourceRequest = {
  /**
   * The external ID of the metadata field to restore the datasource values for.
   */
  externalId: string;
  requestBody: RestoreMetadataFieldDatasourceRequestBody;
};

/** @internal */
export const RestoreMetadataFieldDatasourceGlobals$inboundSchema: z.ZodType<
  RestoreMetadataFieldDatasourceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type RestoreMetadataFieldDatasourceGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const RestoreMetadataFieldDatasourceGlobals$outboundSchema: z.ZodType<
  RestoreMetadataFieldDatasourceGlobals$Outbound,
  z.ZodTypeDef,
  RestoreMetadataFieldDatasourceGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestoreMetadataFieldDatasourceGlobals$ {
  /** @deprecated use `RestoreMetadataFieldDatasourceGlobals$inboundSchema` instead. */
  export const inboundSchema =
    RestoreMetadataFieldDatasourceGlobals$inboundSchema;
  /** @deprecated use `RestoreMetadataFieldDatasourceGlobals$outboundSchema` instead. */
  export const outboundSchema =
    RestoreMetadataFieldDatasourceGlobals$outboundSchema;
  /** @deprecated use `RestoreMetadataFieldDatasourceGlobals$Outbound` instead. */
  export type Outbound = RestoreMetadataFieldDatasourceGlobals$Outbound;
}

export function restoreMetadataFieldDatasourceGlobalsToJSON(
  restoreMetadataFieldDatasourceGlobals: RestoreMetadataFieldDatasourceGlobals,
): string {
  return JSON.stringify(
    RestoreMetadataFieldDatasourceGlobals$outboundSchema.parse(
      restoreMetadataFieldDatasourceGlobals,
    ),
  );
}

export function restoreMetadataFieldDatasourceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RestoreMetadataFieldDatasourceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RestoreMetadataFieldDatasourceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestoreMetadataFieldDatasourceGlobals' from JSON`,
  );
}

/** @internal */
export const RestoreMetadataFieldDatasourceRequestBody$inboundSchema: z.ZodType<
  RestoreMetadataFieldDatasourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_ids": "externalIds",
  });
});

/** @internal */
export type RestoreMetadataFieldDatasourceRequestBody$Outbound = {
  external_ids?: Array<string> | undefined;
};

/** @internal */
export const RestoreMetadataFieldDatasourceRequestBody$outboundSchema:
  z.ZodType<
    RestoreMetadataFieldDatasourceRequestBody$Outbound,
    z.ZodTypeDef,
    RestoreMetadataFieldDatasourceRequestBody
  > = z.object({
    externalIds: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      externalIds: "external_ids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestoreMetadataFieldDatasourceRequestBody$ {
  /** @deprecated use `RestoreMetadataFieldDatasourceRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RestoreMetadataFieldDatasourceRequestBody$inboundSchema;
  /** @deprecated use `RestoreMetadataFieldDatasourceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RestoreMetadataFieldDatasourceRequestBody$outboundSchema;
  /** @deprecated use `RestoreMetadataFieldDatasourceRequestBody$Outbound` instead. */
  export type Outbound = RestoreMetadataFieldDatasourceRequestBody$Outbound;
}

export function restoreMetadataFieldDatasourceRequestBodyToJSON(
  restoreMetadataFieldDatasourceRequestBody:
    RestoreMetadataFieldDatasourceRequestBody,
): string {
  return JSON.stringify(
    RestoreMetadataFieldDatasourceRequestBody$outboundSchema.parse(
      restoreMetadataFieldDatasourceRequestBody,
    ),
  );
}

export function restoreMetadataFieldDatasourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RestoreMetadataFieldDatasourceRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RestoreMetadataFieldDatasourceRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RestoreMetadataFieldDatasourceRequestBody' from JSON`,
  );
}

/** @internal */
export const RestoreMetadataFieldDatasourceRequest$inboundSchema: z.ZodType<
  RestoreMetadataFieldDatasourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  RequestBody: z.lazy(() =>
    RestoreMetadataFieldDatasourceRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RestoreMetadataFieldDatasourceRequest$Outbound = {
  external_id: string;
  RequestBody: RestoreMetadataFieldDatasourceRequestBody$Outbound;
};

/** @internal */
export const RestoreMetadataFieldDatasourceRequest$outboundSchema: z.ZodType<
  RestoreMetadataFieldDatasourceRequest$Outbound,
  z.ZodTypeDef,
  RestoreMetadataFieldDatasourceRequest
> = z.object({
  externalId: z.string(),
  requestBody: z.lazy(() =>
    RestoreMetadataFieldDatasourceRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestoreMetadataFieldDatasourceRequest$ {
  /** @deprecated use `RestoreMetadataFieldDatasourceRequest$inboundSchema` instead. */
  export const inboundSchema =
    RestoreMetadataFieldDatasourceRequest$inboundSchema;
  /** @deprecated use `RestoreMetadataFieldDatasourceRequest$outboundSchema` instead. */
  export const outboundSchema =
    RestoreMetadataFieldDatasourceRequest$outboundSchema;
  /** @deprecated use `RestoreMetadataFieldDatasourceRequest$Outbound` instead. */
  export type Outbound = RestoreMetadataFieldDatasourceRequest$Outbound;
}

export function restoreMetadataFieldDatasourceRequestToJSON(
  restoreMetadataFieldDatasourceRequest: RestoreMetadataFieldDatasourceRequest,
): string {
  return JSON.stringify(
    RestoreMetadataFieldDatasourceRequest$outboundSchema.parse(
      restoreMetadataFieldDatasourceRequest,
    ),
  );
}

export function restoreMetadataFieldDatasourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<RestoreMetadataFieldDatasourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RestoreMetadataFieldDatasourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RestoreMetadataFieldDatasourceRequest' from JSON`,
  );
}
