/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteMetadataFieldDatasourceGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type DeleteMetadataFieldDatasourceRequestBody = {
  /**
   * The external IDs of the datasource values to delete.
   */
  externalIds: Array<string>;
};

export type DeleteMetadataFieldDatasourceRequest = {
  /**
   * The external ID of the metadata field to update the datasource for.
   */
  externalId: string;
  requestBody: DeleteMetadataFieldDatasourceRequestBody;
};

/** @internal */
export const DeleteMetadataFieldDatasourceGlobals$inboundSchema: z.ZodType<
  DeleteMetadataFieldDatasourceGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type DeleteMetadataFieldDatasourceGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const DeleteMetadataFieldDatasourceGlobals$outboundSchema: z.ZodType<
  DeleteMetadataFieldDatasourceGlobals$Outbound,
  z.ZodTypeDef,
  DeleteMetadataFieldDatasourceGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMetadataFieldDatasourceGlobals$ {
  /** @deprecated use `DeleteMetadataFieldDatasourceGlobals$inboundSchema` instead. */
  export const inboundSchema =
    DeleteMetadataFieldDatasourceGlobals$inboundSchema;
  /** @deprecated use `DeleteMetadataFieldDatasourceGlobals$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMetadataFieldDatasourceGlobals$outboundSchema;
  /** @deprecated use `DeleteMetadataFieldDatasourceGlobals$Outbound` instead. */
  export type Outbound = DeleteMetadataFieldDatasourceGlobals$Outbound;
}

export function deleteMetadataFieldDatasourceGlobalsToJSON(
  deleteMetadataFieldDatasourceGlobals: DeleteMetadataFieldDatasourceGlobals,
): string {
  return JSON.stringify(
    DeleteMetadataFieldDatasourceGlobals$outboundSchema.parse(
      deleteMetadataFieldDatasourceGlobals,
    ),
  );
}

export function deleteMetadataFieldDatasourceGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMetadataFieldDatasourceGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMetadataFieldDatasourceGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMetadataFieldDatasourceGlobals' from JSON`,
  );
}

/** @internal */
export const DeleteMetadataFieldDatasourceRequestBody$inboundSchema: z.ZodType<
  DeleteMetadataFieldDatasourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "external_ids": "externalIds",
  });
});

/** @internal */
export type DeleteMetadataFieldDatasourceRequestBody$Outbound = {
  external_ids: Array<string>;
};

/** @internal */
export const DeleteMetadataFieldDatasourceRequestBody$outboundSchema: z.ZodType<
  DeleteMetadataFieldDatasourceRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteMetadataFieldDatasourceRequestBody
> = z.object({
  externalIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    externalIds: "external_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMetadataFieldDatasourceRequestBody$ {
  /** @deprecated use `DeleteMetadataFieldDatasourceRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteMetadataFieldDatasourceRequestBody$inboundSchema;
  /** @deprecated use `DeleteMetadataFieldDatasourceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMetadataFieldDatasourceRequestBody$outboundSchema;
  /** @deprecated use `DeleteMetadataFieldDatasourceRequestBody$Outbound` instead. */
  export type Outbound = DeleteMetadataFieldDatasourceRequestBody$Outbound;
}

export function deleteMetadataFieldDatasourceRequestBodyToJSON(
  deleteMetadataFieldDatasourceRequestBody:
    DeleteMetadataFieldDatasourceRequestBody,
): string {
  return JSON.stringify(
    DeleteMetadataFieldDatasourceRequestBody$outboundSchema.parse(
      deleteMetadataFieldDatasourceRequestBody,
    ),
  );
}

export function deleteMetadataFieldDatasourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteMetadataFieldDatasourceRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMetadataFieldDatasourceRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteMetadataFieldDatasourceRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteMetadataFieldDatasourceRequest$inboundSchema: z.ZodType<
  DeleteMetadataFieldDatasourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  RequestBody: z.lazy(() =>
    DeleteMetadataFieldDatasourceRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteMetadataFieldDatasourceRequest$Outbound = {
  external_id: string;
  RequestBody: DeleteMetadataFieldDatasourceRequestBody$Outbound;
};

/** @internal */
export const DeleteMetadataFieldDatasourceRequest$outboundSchema: z.ZodType<
  DeleteMetadataFieldDatasourceRequest$Outbound,
  z.ZodTypeDef,
  DeleteMetadataFieldDatasourceRequest
> = z.object({
  externalId: z.string(),
  requestBody: z.lazy(() =>
    DeleteMetadataFieldDatasourceRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMetadataFieldDatasourceRequest$ {
  /** @deprecated use `DeleteMetadataFieldDatasourceRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteMetadataFieldDatasourceRequest$inboundSchema;
  /** @deprecated use `DeleteMetadataFieldDatasourceRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteMetadataFieldDatasourceRequest$outboundSchema;
  /** @deprecated use `DeleteMetadataFieldDatasourceRequest$Outbound` instead. */
  export type Outbound = DeleteMetadataFieldDatasourceRequest$Outbound;
}

export function deleteMetadataFieldDatasourceRequestToJSON(
  deleteMetadataFieldDatasourceRequest: DeleteMetadataFieldDatasourceRequest,
): string {
  return JSON.stringify(
    DeleteMetadataFieldDatasourceRequest$outboundSchema.parse(
      deleteMetadataFieldDatasourceRequest,
    ),
  );
}

export function deleteMetadataFieldDatasourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMetadataFieldDatasourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteMetadataFieldDatasourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMetadataFieldDatasourceRequest' from JSON`,
  );
}
