/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReorderMetadataFieldGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ReorderMetadataFieldRequestBody = {
  /**
   * The position of the metadata field.
   */
  position: number;
};

export type ReorderMetadataFieldRequest = {
  /**
   * The external ID of the metadata field to reorder.
   */
  externalId: string;
  requestBody: ReorderMetadataFieldRequestBody;
};

/**
 * metadata fields reordered
 */
export type ReorderMetadataFieldResponse = {
  metadataFields?: Array<components.MetadataField> | undefined;
};

/** @internal */
export const ReorderMetadataFieldGlobals$inboundSchema: z.ZodType<
  ReorderMetadataFieldGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ReorderMetadataFieldGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ReorderMetadataFieldGlobals$outboundSchema: z.ZodType<
  ReorderMetadataFieldGlobals$Outbound,
  z.ZodTypeDef,
  ReorderMetadataFieldGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReorderMetadataFieldGlobals$ {
  /** @deprecated use `ReorderMetadataFieldGlobals$inboundSchema` instead. */
  export const inboundSchema = ReorderMetadataFieldGlobals$inboundSchema;
  /** @deprecated use `ReorderMetadataFieldGlobals$outboundSchema` instead. */
  export const outboundSchema = ReorderMetadataFieldGlobals$outboundSchema;
  /** @deprecated use `ReorderMetadataFieldGlobals$Outbound` instead. */
  export type Outbound = ReorderMetadataFieldGlobals$Outbound;
}

export function reorderMetadataFieldGlobalsToJSON(
  reorderMetadataFieldGlobals: ReorderMetadataFieldGlobals,
): string {
  return JSON.stringify(
    ReorderMetadataFieldGlobals$outboundSchema.parse(
      reorderMetadataFieldGlobals,
    ),
  );
}

export function reorderMetadataFieldGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReorderMetadataFieldGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReorderMetadataFieldGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReorderMetadataFieldGlobals' from JSON`,
  );
}

/** @internal */
export const ReorderMetadataFieldRequestBody$inboundSchema: z.ZodType<
  ReorderMetadataFieldRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  position: z.number().int(),
});

/** @internal */
export type ReorderMetadataFieldRequestBody$Outbound = {
  position: number;
};

/** @internal */
export const ReorderMetadataFieldRequestBody$outboundSchema: z.ZodType<
  ReorderMetadataFieldRequestBody$Outbound,
  z.ZodTypeDef,
  ReorderMetadataFieldRequestBody
> = z.object({
  position: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReorderMetadataFieldRequestBody$ {
  /** @deprecated use `ReorderMetadataFieldRequestBody$inboundSchema` instead. */
  export const inboundSchema = ReorderMetadataFieldRequestBody$inboundSchema;
  /** @deprecated use `ReorderMetadataFieldRequestBody$outboundSchema` instead. */
  export const outboundSchema = ReorderMetadataFieldRequestBody$outboundSchema;
  /** @deprecated use `ReorderMetadataFieldRequestBody$Outbound` instead. */
  export type Outbound = ReorderMetadataFieldRequestBody$Outbound;
}

export function reorderMetadataFieldRequestBodyToJSON(
  reorderMetadataFieldRequestBody: ReorderMetadataFieldRequestBody,
): string {
  return JSON.stringify(
    ReorderMetadataFieldRequestBody$outboundSchema.parse(
      reorderMetadataFieldRequestBody,
    ),
  );
}

export function reorderMetadataFieldRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ReorderMetadataFieldRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReorderMetadataFieldRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReorderMetadataFieldRequestBody' from JSON`,
  );
}

/** @internal */
export const ReorderMetadataFieldRequest$inboundSchema: z.ZodType<
  ReorderMetadataFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  RequestBody: z.lazy(() => ReorderMetadataFieldRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ReorderMetadataFieldRequest$Outbound = {
  external_id: string;
  RequestBody: ReorderMetadataFieldRequestBody$Outbound;
};

/** @internal */
export const ReorderMetadataFieldRequest$outboundSchema: z.ZodType<
  ReorderMetadataFieldRequest$Outbound,
  z.ZodTypeDef,
  ReorderMetadataFieldRequest
> = z.object({
  externalId: z.string(),
  requestBody: z.lazy(() => ReorderMetadataFieldRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReorderMetadataFieldRequest$ {
  /** @deprecated use `ReorderMetadataFieldRequest$inboundSchema` instead. */
  export const inboundSchema = ReorderMetadataFieldRequest$inboundSchema;
  /** @deprecated use `ReorderMetadataFieldRequest$outboundSchema` instead. */
  export const outboundSchema = ReorderMetadataFieldRequest$outboundSchema;
  /** @deprecated use `ReorderMetadataFieldRequest$Outbound` instead. */
  export type Outbound = ReorderMetadataFieldRequest$Outbound;
}

export function reorderMetadataFieldRequestToJSON(
  reorderMetadataFieldRequest: ReorderMetadataFieldRequest,
): string {
  return JSON.stringify(
    ReorderMetadataFieldRequest$outboundSchema.parse(
      reorderMetadataFieldRequest,
    ),
  );
}

export function reorderMetadataFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReorderMetadataFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReorderMetadataFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReorderMetadataFieldRequest' from JSON`,
  );
}

/** @internal */
export const ReorderMetadataFieldResponse$inboundSchema: z.ZodType<
  ReorderMetadataFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata_fields: z.array(components.MetadataField$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "metadata_fields": "metadataFields",
  });
});

/** @internal */
export type ReorderMetadataFieldResponse$Outbound = {
  metadata_fields?: Array<components.MetadataField$Outbound> | undefined;
};

/** @internal */
export const ReorderMetadataFieldResponse$outboundSchema: z.ZodType<
  ReorderMetadataFieldResponse$Outbound,
  z.ZodTypeDef,
  ReorderMetadataFieldResponse
> = z.object({
  metadataFields: z.array(components.MetadataField$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    metadataFields: "metadata_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReorderMetadataFieldResponse$ {
  /** @deprecated use `ReorderMetadataFieldResponse$inboundSchema` instead. */
  export const inboundSchema = ReorderMetadataFieldResponse$inboundSchema;
  /** @deprecated use `ReorderMetadataFieldResponse$outboundSchema` instead. */
  export const outboundSchema = ReorderMetadataFieldResponse$outboundSchema;
  /** @deprecated use `ReorderMetadataFieldResponse$Outbound` instead. */
  export type Outbound = ReorderMetadataFieldResponse$Outbound;
}

export function reorderMetadataFieldResponseToJSON(
  reorderMetadataFieldResponse: ReorderMetadataFieldResponse,
): string {
  return JSON.stringify(
    ReorderMetadataFieldResponse$outboundSchema.parse(
      reorderMetadataFieldResponse,
    ),
  );
}

export function reorderMetadataFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReorderMetadataFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReorderMetadataFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReorderMetadataFieldResponse' from JSON`,
  );
}
