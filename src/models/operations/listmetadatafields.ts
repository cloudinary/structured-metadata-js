/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMetadataFieldsGlobals = {
  /**
   * The cloud name of your product environment.
   */
  cloudName?: string | undefined;
};

export type ListMetadataFieldsRequest = {
  /**
   * The external IDs of the metadata fields to retrieve. if not provided, all metadata fields will be returned.
   */
  externalIds?: Array<string> | undefined;
};

/**
 * metadata fields retrieved
 */
export type ListMetadataFieldsResponse = {
  metadataFields?: Array<components.MetadataField> | undefined;
};

/** @internal */
export const ListMetadataFieldsGlobals$inboundSchema: z.ZodType<
  ListMetadataFieldsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  cloud_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "cloud_name": "cloudName",
  });
});

/** @internal */
export type ListMetadataFieldsGlobals$Outbound = {
  cloud_name?: string | undefined;
};

/** @internal */
export const ListMetadataFieldsGlobals$outboundSchema: z.ZodType<
  ListMetadataFieldsGlobals$Outbound,
  z.ZodTypeDef,
  ListMetadataFieldsGlobals
> = z.object({
  cloudName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    cloudName: "cloud_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMetadataFieldsGlobals$ {
  /** @deprecated use `ListMetadataFieldsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListMetadataFieldsGlobals$inboundSchema;
  /** @deprecated use `ListMetadataFieldsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListMetadataFieldsGlobals$outboundSchema;
  /** @deprecated use `ListMetadataFieldsGlobals$Outbound` instead. */
  export type Outbound = ListMetadataFieldsGlobals$Outbound;
}

export function listMetadataFieldsGlobalsToJSON(
  listMetadataFieldsGlobals: ListMetadataFieldsGlobals,
): string {
  return JSON.stringify(
    ListMetadataFieldsGlobals$outboundSchema.parse(listMetadataFieldsGlobals),
  );
}

export function listMetadataFieldsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListMetadataFieldsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMetadataFieldsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMetadataFieldsGlobals' from JSON`,
  );
}

/** @internal */
export const ListMetadataFieldsRequest$inboundSchema: z.ZodType<
  ListMetadataFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_ids": "externalIds",
  });
});

/** @internal */
export type ListMetadataFieldsRequest$Outbound = {
  external_ids?: Array<string> | undefined;
};

/** @internal */
export const ListMetadataFieldsRequest$outboundSchema: z.ZodType<
  ListMetadataFieldsRequest$Outbound,
  z.ZodTypeDef,
  ListMetadataFieldsRequest
> = z.object({
  externalIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    externalIds: "external_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMetadataFieldsRequest$ {
  /** @deprecated use `ListMetadataFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = ListMetadataFieldsRequest$inboundSchema;
  /** @deprecated use `ListMetadataFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = ListMetadataFieldsRequest$outboundSchema;
  /** @deprecated use `ListMetadataFieldsRequest$Outbound` instead. */
  export type Outbound = ListMetadataFieldsRequest$Outbound;
}

export function listMetadataFieldsRequestToJSON(
  listMetadataFieldsRequest: ListMetadataFieldsRequest,
): string {
  return JSON.stringify(
    ListMetadataFieldsRequest$outboundSchema.parse(listMetadataFieldsRequest),
  );
}

export function listMetadataFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMetadataFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMetadataFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMetadataFieldsRequest' from JSON`,
  );
}

/** @internal */
export const ListMetadataFieldsResponse$inboundSchema: z.ZodType<
  ListMetadataFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata_fields: z.array(components.MetadataField$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "metadata_fields": "metadataFields",
  });
});

/** @internal */
export type ListMetadataFieldsResponse$Outbound = {
  metadata_fields?: Array<components.MetadataField$Outbound> | undefined;
};

/** @internal */
export const ListMetadataFieldsResponse$outboundSchema: z.ZodType<
  ListMetadataFieldsResponse$Outbound,
  z.ZodTypeDef,
  ListMetadataFieldsResponse
> = z.object({
  metadataFields: z.array(components.MetadataField$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    metadataFields: "metadata_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMetadataFieldsResponse$ {
  /** @deprecated use `ListMetadataFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = ListMetadataFieldsResponse$inboundSchema;
  /** @deprecated use `ListMetadataFieldsResponse$outboundSchema` instead. */
  export const outboundSchema = ListMetadataFieldsResponse$outboundSchema;
  /** @deprecated use `ListMetadataFieldsResponse$Outbound` instead. */
  export type Outbound = ListMetadataFieldsResponse$Outbound;
}

export function listMetadataFieldsResponseToJSON(
  listMetadataFieldsResponse: ListMetadataFieldsResponse,
): string {
  return JSON.stringify(
    ListMetadataFieldsResponse$outboundSchema.parse(listMetadataFieldsResponse),
  );
}

export function listMetadataFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMetadataFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMetadataFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMetadataFieldsResponse' from JSON`,
  );
}
