/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { metadataRulesDeleteMetadataRule } from "../../funcs/metadataRulesDeleteMetadataRule.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  externalId: z.string(),
};

export const tool$metadataRulesDeleteMetadataRule: ToolDefinition<typeof args> =
  {
    name: "delete-metadata-rule",
    description: `Deletes a conditional metadata rule by its ID

Permanently deletes a metadata rule.`,
    scopes: ["builder"],
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await metadataRulesDeleteMetadataRule(
        client,
        args.externalId,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
