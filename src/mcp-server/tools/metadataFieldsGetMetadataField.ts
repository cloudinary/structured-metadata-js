/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { metadataFieldsGetMetadataField } from "../../funcs/metadataFieldsGetMetadataField.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  externalId: z.string(),
};

export const tool$metadataFieldsGetMetadataField: ToolDefinition<typeof args> =
  {
    name: "get-metadata-field",
    description:
      `Retrieves the definition of a specific structured metadata field by its identifier (external_id)

Retrieves detailed information about the specified metadata field.`,
    scopes: ["admin"],
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await metadataFieldsGetMetadataField(
        client,
        args.externalId,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
