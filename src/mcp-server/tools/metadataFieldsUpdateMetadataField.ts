/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { metadataFieldsUpdateMetadataField } from "../../funcs/metadataFieldsUpdateMetadataField.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  externalId: z.string(),
  metadataField: components.MetadataField$inboundSchema,
};

export const tool$metadataFieldsUpdateMetadataField: ToolDefinition<
  typeof args
> = {
  name: "update-metadata-field",
  description: `Updates the configuration of an existing metadata field

Updates the properties and configuration of the specified metadata field.`,
  scopes: ["admin"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await metadataFieldsUpdateMetadataField(
      client,
      args.externalId,
      args.metadataField,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
